version: '3'

tasks:
  # Development commands
  dev:
    desc: Start both frontend and backend development servers
    deps: [frontend:dev, backend:dev]

  install:
    desc: Install all dependencies
    deps: [frontend:install, backend:install]

  # Frontend tasks
  frontend:dev:
    desc: Start the frontend development server
    dir: frontend
    cmds:
      - pnpm run dev

  frontend:build:
    desc: Build the frontend for production
    dir: frontend
    cmds:
      - pnpm run build

  frontend:start:
    desc: Start the production frontend server
    dir: frontend
    cmds:
      - pnpm run start

  frontend:install:
    desc: Install frontend dependencies
    dir: frontend
    cmds:
      - pnpm install

  frontend:lint:
    desc: Run linting on frontend code
    dir: frontend
    cmds:
      - pnpm run lint

  frontend:lint-fix:
    desc: Fix linting issues in frontend code
    dir: frontend
    cmds:
      - pnpm exec eslint . --fix

  frontend:format:
    desc: Format frontend code (alias for lint-fix)
    dir: frontend
    cmds:
      - pnpm exec eslint . --fix

  # Backend tasks
  backend:install:
    desc: Install backend dependencies with uv
    dir: backend
    cmds:
      - uv sync --dev

  backend:setup-env:
    desc: Setup environment variables for backend
    dir: backend
    cmds:
      - cp ../.env .env 2>/dev/null || echo "No .env file found in main directory"

  backend:dev:
    desc: Start the backend development server
    dir: backend
    deps: [backend:setup-env]
    cmds:
      - uv run uvicorn main:app --reload --port 8000

  backend:run:
    desc: Start the backend server (alias for dev)
    dir: backend
    deps: [backend:setup-env]
    cmds:
      - uv run uvicorn main:app --reload --port 8000

  backend:test:
    desc: Run backend tests
    dir: backend
    deps: [backend:setup-env]
    cmds:
      - uv run pytest

  backend:lint:
    desc: Run linting on backend code
    dir: backend
    cmds:
      - uv run ruff check .
      - uv run black --check .

  backend:lint-fix:
    desc: Fix linting issues in backend code (format)
    dir: backend
    cmds:
      - uv run black .
      - uv run ruff check --fix .

  backend:format:
    desc: Format backend code (alias for lint-fix)
    dir: backend
    cmds:
      - uv run black .
      - uv run ruff check --fix .

  backend:type-check:
    desc: Run type checking on backend code
    dir: backend
    cmds:
      - uv run mypy .

  backend:check:
    desc: Run all checks (lint + type-check)
    dir: backend
    deps: [backend:lint, backend:type-check]

  backend:clean:
    desc: Clean backend cache files
    dir: backend
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
      - find . -type f -name "*.pyc" -delete
      - find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
      - find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
      - find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
      - rm -rf .env

  # Production/deployment tasks
  build:
    desc: Build both frontend and backend for production
    deps: [frontend:build]

  # Utility tasks
  clean:
    desc: Clean all build artifacts and dependencies
    deps: [frontend:clean, backend:clean]

  frontend:clean:
    desc: Clean frontend build artifacts
    dir: frontend
    cmds:
      - rm -rf node_modules .next pnpm-lock.yaml

  setup:
    desc: Initial project setup
    cmds:
      - task install
      - echo "Setup complete! Run 'task dev' to start development servers"